[
  {
    "title": "Siphon",
    "summary": "Configure ETL operations via GUI. No scripting required.",
    "tags": ["Electron", "React"],
    "imageUrl": "mononoke.jpg",
    "demoUrl": "use this for video demo",
    "repoUrl": null,
    "sections": [
      {
        "subtitle": null,
        "text": "Project I worked on for about 5 months as an intern at Fulcrum-GT. The intent was to create a tool which allowed for easy ETL configuration without the need for any coding knowledge so that our config teams could rely less on engineers for new client setup. Worked on this with only one other intern.",
        "list": null,
        "imageUrls": ["/siphon_1.png", "/siphon_2.png"]
      },
      {
        "subtitle": "Features",
        "text": "",
        "list": [
          "Type Safety: will check that transformation chains have compatible types from start to finish based on declared schema",
          "Transform Library: implemented a variety of transforms",
          "Mappings from a variety of sources: perform mappings based on database queries, etc",
          "Performance: Leverage Electron's IPC to run transformations on a separate process running in a Node environment which allowed for easy file IO."
        ],
        "imageUrls": null
      },
      {
        "subtitle": "What I learned",
        "text": "",
        "list": [
          "React doesn't pick up on deeply nested state!",
          "Test in real scenarios early on."
        ],
        "imageUrls": null
      },
      {
        "subtitle": "Challenges",
        "text": "",
        "list": [
          "CPU intensive operations and concurrency with javascript."
        ],
        "imageUrls": null
      }
    ]
  }, 
  {
    "title": "This website",
    "summary": "The website you are looking at.",
    "tags": ["React", "Webpack"],
    "imageUrl": "2001.jpg",
    "repoUrl": "https://github.com/L33thaxor118/portfolio",
    "sections": [
      {
        "text": "The fabled Personal Website. I finally went through with it after about 4 years of procrastination. I used this project as an opportunity to challenge myself with some interesting UI components like the 'Cylinder' projects view (only visible on larger screens)."
      },
      {
        "subtitle": "The Cylinder view",
        "text": "One of my favorite parts of this site is the large-screen Cylinder view for my projects. I tried to make this component as flexible as possible.",
        "imageUrls": ["/CylinderPreview.gif"]
      },
      {
        "subtitle": "No more CRA",
        "text": "I decided to take off the training wheels for this one. I built this site from scratch without create-react-app. Setting things up took a bit longer but its nice to have full control of my build."
      },
      {
        "subtitle": "What I learned",
        "list": [
          "CSS box-sizing. I dreaded adding padding until I discovered this property.",
          "CSS transforms are visual, not literal... See this: https://stackoverflow.com/questions/21248111/overflow-behavior-after-using-css3-transform",
          "Media queries. First time making a responsive website."
        ]
      }
    ]
  },
  {
    "title": "Wexly",
    "summary": "Might help couples communicate better.",
    "tags": ["React Native", "Firebase"],
    "imageUrl": "ghostintheshell.jpg",
    "sections": [
      {
        "subtitle": "This page is incomplete. More details coming soon..."
      },
      {
        "text": "Hybrid app I worked on casually for a few months. The app provides instant messaging with a twist: messages are guided. They have a series of steps which suggest how to structure a difficult conversation with a loved one."
      },
      {
        "subtitle": "Features",
        "list": [
          "Instant messaging: Implemented with Firebase",
          "Local persistence: Messages are only held in Firebase until they are delivered. After that they are persisted locally on the client-side.",
          "Multi-Platform: Implemented in React Native which compiles to Android & iOS.",
          "Simple SMS authentication: All that is needed is SMS verification to gain access to the app."
        ]
      },
      {
        "subtitle": "What I learned",
        "list":[
          "Pay attention to React Native version migration requirements!",
          "Leveraged architecture and Firebase services to avoid mounting costs: Firestore to hold and distribute messages, client to mark as received, cloud Functions to remove received messages from Firestore."
        ]
      }
    ]
  }, 
  {
    "title": "Pixel Canvas",
    "summary": "LED matrix controlled over the internet.",
    "tags": ["NodeJs", "Arduino"],
    "imageUrl": "akira.jpg",
    "sections": [
      {
        "subtitle": "More details coming soon...",
        "text": "Here is a sneak peak in the meantime:",
        "imageUrls": ["/pixel-canvas-alpha-demo.gif"]
      }
    ]
  },
  {
    "title": "IlliniHub",
    "repoUrl": "https://github.com/L33thaxor118/Illinihub",
    "summary": "First Android project from my college days (it's horrendous).",
    "tags": ["Android"],
    "imageUrl": "perfectblue.jpg",
    "sections": [
      {
        "subtitle": "More details coming soon...",
        "text": "The repo README has some screenshots and feature descriptions if you are curious."
      }
    ]
  },
  {
    "title": "Composite build helper",
    "summary": "IntelliJ plugin to assist with composing Gradle builds.",
    "tags": ["IntelliJ Platform"],
    "imageUrl": "neoTokyo.jpg",
    "repoUrl": "https://github.com/L33thaxor118/composite-build-helper",
    "sections": [
      {
        "text": "I once worked on a very large mobile banking app which consisted of a main app module which consumed over 15 library modules. Each library module was held in a separate repository and built independently. Integrating library module changes into the app was a painful process. I would often work on 3+ modules at a time to implement a large feature or refactor, each on a separate android studio window. Until I discovered composite Gradle builds.",
        "imageUrls": ["/composite-build-helper-screen.png"]
      },
      {
        "subtitle": "More details coming soon..."
      }
    ]
  }
]