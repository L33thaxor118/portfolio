[
  {
    "title": "Siphon",
    "summary": "Configure Extract-Transform-Load operations visually without writing code.",
    "tags": ["Electron", "React"],
    "imageUrl": "mononoke.jpeg",
    "demoUrl": "use this for video demo",
    "repoUrl": null,
    "sections": [
      {
        "subtitle": null,
        "text": "Project I worked on for about 5 months as an intern at Fulcrum-GT. The intent was to create a tool which allowed for easy ETL configuration without the need for any coding knowledge so that our config teams could rely less on engineers for new client setup. Worked on this with only one other intern.",
        "list": null,
        "imageUrls": ["/siphon_1.png", "/siphon_2.png", "/siphon_1.png"]
      },
      {
        "subtitle": "Features",
        "text": "",
        "list": [
          "Type Safety: will check that transformation chains have compatible types from start to finish based on declared schema",
          "Transform Library: implemented a variety of transforms",
          "Mappings from a variety of sources: perform mappings based on database queries, etc",
          "Performance: Leverage Electron's IPC to run transformations on a separate process running in a Node environment which allowed for easy file IO."
        ],
        "imageUrls": null
      },
      {
        "subtitle": "What I learned",
        "text": "",
        "list": [
          "React doesn't pick up on deeply nested state!",
          "Test in real scenarios early on."
        ],
        "imageUrls": null
      }
    ]
  }, 
  {
    "title": "Wexly",
    "summary": "Helps people communicate better.",
    "tags": ["React Native", "Firebase"],
    "imageUrl": "ghostintheshell.jpeg",
    "details": {
      "description":"Hybrid app I worked on casually for a few months. The app provides instant messaging with a twist: messages are guided. They have a series of steps which suggest how to structure a difficult conversation with a loved one.",
      "repoUrl": null,
      "features": [
        "Instant messaging: Implemented with Firebase",
        "Local persistence: Messages are only held in Firebase until they are delivered. After that they are persisted locally on the client-side.",
        "Multi-Platform: Implemented in React Native which compiles to Android & iOS.",
        "Simple SMS authentication: All that is needed is SMS verification to gain access to the app."
      ],
      "learnings": [
        "Pay attention to React Native version migration requirements!",
        "Leveraged architecture and Firebase services to avoid mounting costs: Firestore to hold and distribute messages, client to mark as received, cloud Functions to remove received messages from Firestore."
      ],
      "images": []
    }
  }, 
  {
    "title": "Unichat",
    "summary": "Instant chat library for my apps.",
    "tags": ["Ktor"],
    "imageUrl": "akiraExplosion.jpeg"
  },
  {
    "title": "Affirmations",
    "summary": "Tiny app to remind myself of things.",
    "tags": ["Electron"],
    "imageUrl": "neoTokyo.jpeg"
  },
  {
    "title": "This Site",
    "summary": "The website you are looking at. Cool cylinder layout and stuff.",
    "tags": ["React", "Webpack"],
    "imageUrl": "2001.jpeg"
  },
  {
    "title": "Gift",
    "summary": "Website I made for my girlfriend on her birthday.",
    "tags": ["React"],
    "imageUrl": "perfect-blue.jpeg"
  }
]